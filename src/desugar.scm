;; Copyright 2013 Omar Jarjur
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;; http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper procedures for simplifying statements before cps-transforming them ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (compile-syntax-rules name reserved-words patterns)
  (define (matches-tail-pattern? expr pattern prev-pattern)
    (if (equal? pattern '...)
      (or (null? expr)
          (and (pair? expr)
               (matches-pattern? (car expr) prev-pattern)
               (matches-tail-pattern? (cdr expr) pattern prev-pattern)))
      (matches-pattern? expr pattern)))
  (define (matches-pattern? expr pattern)
    (cond ((symbol? pattern)
           (or (not (member pattern reserved-words)) (equal? pattern expr)))
          ((pair? pattern)
           (and (pair? expr)
                (matches-pattern? (car expr) (car pattern))
                (matches-tail-pattern?
                  (cdr expr)
                  (cdr pattern)
                  (car pattern))))
          (#t (eq? pattern expr))))
  (define (bind-pattern expr pattern)
    (cond ((symbol? pattern) (list (cons pattern expr)))
          ((pair? pattern)
           (append
             (bind-pattern (car expr) (car pattern))
             (bind-pattern (cdr expr) (cdr pattern))))
          (#t '())))
  (define (rewrite-pattern bindings replacement)
    (if (pair? replacement)
      (cons (rewrite-pattern bindings (car replacement))
            (rewrite-pattern bindings (cdr replacement)))
      (let ((binding (assoc replacement bindings)))
        (if (pair? binding) (cdr binding) replacement))))
  (define (no-op-syntax-rules expr) expr)
  (define (make-syntax-rules patterns)
    (if (pair? patterns)
      (let ((first-rule (car patterns))
            (remaining-rules (make-syntax-rules (cdr patterns))))
        (lambda (expr)
          (if (matches-pattern? expr (car first-rule))
            (rewrite-pattern
              (bind-pattern expr (car first-rule))
              (cadr first-rule))
            (remaining-rules expr))))
      no-op-syntax-rules))
  (make-syntax-rules patterns))
(define (rewrite syntax-bindings statement)
  (define (rewrite-named-let name bindings rewritten-body)
    (cons `(letrec ((,name (lambda ,(map car bindings) ,rewritten-body)))
             ,name)
          (map (lambda (binding) (rewrite-expression (cadr binding)))
               bindings)))
  (define (rewrite-let bindings rewritten-body)
    `(let (unquote
           (map (lambda (binding)
                  `(,(car binding) ,(rewrite-expression (cadr binding))))
                bindings))
       ,rewritten-body))
  (define (rewrite-let* bindings rewritten-body)
    (if (pair? bindings)
      `(let ((,(caar bindings) ,(rewrite-expression (cadar bindings))))
         ,(rewrite-let* (cdr bindings) rewritten-body))
      rewritten-body))
  (define (rewrite-letrec bindings rewritten-body)
    `(letrec (unquote
              (map (lambda (binding)
                     `(,(car binding) ,(rewrite-expression (cadr binding))))
                   bindings))
       ,rewritten-body))
  (define (rewrite-letrec* bindings rewritten-body)
    (if (pair? bindings)
      `(letrec ((,(caar bindings) ,(rewrite-expression (cadar bindings))))
         ,(rewrite-letrec* (cdr bindings) rewritten-body))
      rewritten-body))
  (define (rewrite-cond cases)
    (cond ((not (pair? cases)) '(begin))
          ((or (eq? (caar cases) 'else) (eq? (caar cases) #t))
           (cons 'begin (map rewrite-expression (cdar cases))))
          ((null? (cdar cases))
           `(let ((test ,(rewrite-expression (caar cases)))
                  (otherwise (lambda () ,(rewrite-cond (cdr cases)))))
              (if test test (otherwise))))
          ((eq? (cadar cases) '=>)
           `(let ((test ,(rewrite-expression (caar cases)))
                  (then-thunk (lambda () ,(rewrite-expression (caddar cases))))
                  (else-thunk (lambda () ,(rewrite-cond (cdr cases)))))
              (if test ((then-thunk) test) (else-thunk))))
          (#t
           `(if ,(rewrite-expression (caar cases))
              ,(cons 'begin (map rewrite-expression (cdar cases)))
              ,(rewrite-cond (cdr cases))))))
  (define (rewrite-case key cases)
    (define (rewrite-cases cases next-id cont)
      (if (pair? cases)
        (rewrite-cases
          (cdr cases)
          (+ next-id 1)
          (lambda (bindings code)
            (let ((thunk-id
                    (string->symbol
                      (string-append "t_" (number->string next-id)))))
              (if (eq? (caar cases) 'else)
                (cont `((,thunk-id
                         (lambda ()
                           ,(cons 'begin
                                  (map rewrite-expression (cdar cases))))))
                      `(,thunk-id))
                (cont (cons `(,thunk-id
                              (lambda ()
                                ,(cons 'begin
                                       (map rewrite-expression (cdar cases)))))
                            bindings)
                      `(if (memv key ',(caar cases)) (,thunk-id) ,code))))))
        (cont '() '(begin))))
    (rewrite-cases
      cases
      0
      (lambda (bindings code)
        `(let ,(cons `(key ,(rewrite-expression key)) bindings) ,code))))
  (define (free-symbol . args)
    (letrec ((symbol-in?
               (lambda (symbol expr)
                 (if (pair? expr)
                   (or (symbol-in? symbol (car expr))
                       (symbol-in? symbol (cdr expr)))
                   (eq? symbol expr))))
             (find-symbol
               (lambda (next-id)
                 (let* ((symbol-name
                          (string-append "s_" (number->string next-id)))
                        (symbol (string->symbol symbol-name)))
                   (if (symbol-in? symbol args)
                     (find-symbol (+ next-id 1))
                     symbol)))))
      (find-symbol 0)))
  (define (rewrite-do vars test commands)
    (let ((params (map car vars))
          (first-args
            (map (lambda (var) (rewrite-expression (cadr var))) vars))
          (update-args
            (map (lambda (var)
                   (if (pair? (cddr var))
                     (rewrite-expression (caddr var))
                     (car var)))
                 vars))
          (loop-var (free-symbol vars test commands)))
      `(letrec ((,loop-var
                 (lambda ,params
                   (if ,(rewrite-expression (car test))
                     ,(cons 'begin (map rewrite-expression (cdr test)))
                     ,(cons 'begin
                            (append
                              (map rewrite-expression commands)
                              `(,(cons loop-var update-args))))))))
         ,(cons loop-var first-args))))
  (define (rewrite-and tests)
    (if (pair? tests)
      (if (pair? (cdr tests))
        `(let ((first ,(rewrite-expression (car tests)))
               (rest (lambda () ,(rewrite-and (cdr tests)))))
           (if first (rest) first))
        (rewrite-expression (car tests)))
      '#t))
  (define (rewrite-or tests)
    (if (pair? tests)
      `(let ((first ,(rewrite-expression (car tests)))
             (rest (lambda () ,(rewrite-or (cdr tests)))))
         (if first first (rest)))
      '#f))
  (define (rewrite-quasiquote expr depth)
    (cond ((= depth 0) (rewrite-expression expr))
          ((vector? expr)
           (let ((rewritten-list
                   (rewrite-quasiquote (vector->list expr) depth)))
             (if (and (pair? rewritten-list) (eq? (car rewritten-list) 'quote))
               (list 'quote (list->vector (cadr rewritten-list)))
               (list 'list->vector rewritten-list))))
          ((not (pair? expr)) (list 'quote expr))
          ((eq? (car expr) 'quasiquote)
           (rewrite-quasiquote (cadr expr) (+ depth 1)))
          ((eq? (car expr) 'unquote)
           (rewrite-quasiquote (cadr expr) (- depth 1)))
          ((and (pair? (car expr))
                (eq? (caar expr) 'unquote-splicing)
                (= depth 1))
           `(append
              ,(rewrite-expression (cadar expr))
              ,(rewrite-quasiquote (cdr expr) depth)))
          (#t
           (let ((head (rewrite-quasiquote (car expr) depth))
                 (tail (rewrite-quasiquote (cdr expr) depth)))
             (if (and (pair? head)
                      (pair? tail)
                      (eq? (car head) 'quote)
                      (eq? (car tail) 'quote))
               (list 'quote (cons (cadr head) (cadr tail)))
               (list 'cons head tail))))))
  (define (get-definitions exprs definitions bodies return)
    (if (pair? exprs)
      (if (and (pair? (car exprs)) (eq? (caar exprs) 'define))
        (get-definitions
          (cdr exprs)
          (cons (car exprs) definitions)
          bodies
          return)
        (get-definitions
          (cdr exprs)
          definitions
          (cons (car exprs) bodies)
          return))
      (return (reverse definitions) (reverse bodies))))
  (define (get-binding definition)
    (if (pair? (cadr definition))
      `(,(caadr definition)
        ,(rewrite-expression
           (append `(lambda ,(cdadr definition)) (cddr definition))))
      `(,(cadr definition) ,(rewrite-expression (caddr definition)))))
  (define (rewrite-statements statements)
    (get-definitions
      statements
      '()
      '()
      (lambda (definitions bodies)
        (if (pair? definitions)
          `(letrec ,(map get-binding definitions)
             ,(cons 'begin (map rewrite-expression bodies)))
          (cons 'begin (map rewrite-expression bodies))))))
  (define (rewrite-pair expr)
    (cond ((eq? (car expr) 'quote) expr)
          ((eq? (car expr) 'quasiquote) (rewrite-quasiquote (cadr expr) 1))
          ((eq? (car expr) 'let)
           (if (symbol? (cadr expr))
             (rewrite-named-let
               (cadr expr)
               (caddr expr)
               (rewrite-statements (cdddr expr)))
             (rewrite-let (cadr expr) (rewrite-statements (cddr expr)))))
          ((eq? (car expr) 'letrec)
           (rewrite-letrec (cadr expr) (rewrite-statements (cddr expr))))
          ((eq? (car expr) 'let*)
           (rewrite-let* (cadr expr) (rewrite-statements (cddr expr))))
          ((eq? (car expr) 'letrec*)
           (rewrite-letrec* (cadr expr) (rewrite-statements (cddr expr))))
          ((eq? (car expr) 'cond) (rewrite-cond (cdr expr)))
          ((eq? (car expr) 'case) (rewrite-case (cadr expr) (cddr expr)))
          ((eq? (car expr) 'do)
           (rewrite-do (cadr expr) (caddr expr) (cdddr expr)))
          ((eq? (car expr) 'and) (rewrite-and (cdr expr)))
          ((eq? (car expr) 'or) (rewrite-or (cdr expr)))
          ((eq? (car expr) 'define)
           (if (pair? (cadr expr))
             `(define ,(caadr expr)
                ,(rewrite-expression
                   (append `(lambda ,(cdadr expr)) (cddr expr))))
             `(define ,(cadr expr) ,(rewrite-expression (caddr expr)))))
          ((eq? (car expr) 'set!)
           `(set! ,(cadr expr) ,(rewrite-expression (caddr expr))))
          ((eq? (car expr) 'begin) (rewrite-statements (cdr expr)))
          ((eq? (car expr) 'lambda)
           `(lambda ,(cadr expr) ,(rewrite-statements (cddr expr))))
          ((eq? (car expr) 'if)
           (if (pair? (cdddr expr))
             `(if ,(rewrite-expression (cadr expr))
                ,(rewrite-expression (caddr expr))
                ,(rewrite-expression (cadddr expr)))
             `(if ,(rewrite-expression (cadr expr))
                ,(rewrite-expression (caddr expr))
                (begin))))
          (#t (map rewrite-expression expr))))
  (define (find-syntax bindings name)
    (if (pair? bindings)
      (if (eq? (caar bindings) name)
        (cadar bindings)
        (find-syntax (cdr bindings) name))
      '()))
  (define (rewrite-expression expr)
    (cond ((not (pair? expr)) expr)
          ((symbol? (car expr))
           (let ((matching-syntax (find-syntax syntax-bindings (car expr))))
             (if (null? matching-syntax)
               (rewrite-pair expr)
               (let ((rewritten-expr (matching-syntax expr)))
                 (if (equal? rewritten-expr expr)
                   (rewrite-pair rewritten-expr)
                   (rewrite-expression rewritten-expr))))))
          (#t (rewrite-pair expr))))
  (rewrite-expression statement))
(define (make-rewrite-rules syntax-bindings)
  (lambda (statement return)
    (if (and (pair? statement)
             (eq? (car statement) 'define-syntax)
             (pair? (caddr statement))
             (eq? (caar (cddr statement)) 'syntax-rules))
      (let* ((name (cadr statement))
             (rules (caddr statement))
             (reserved-words (cadr rules))
             (patterns (cddr rules)))
        (set! syntax-bindings
          (cons `(,name ,(compile-syntax-rules name reserved-words patterns))
                syntax-bindings)))
      (return (rewrite syntax-bindings statement)))))
